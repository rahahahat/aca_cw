# from hashlib import blake2b
# import random
# from telnetlib import BM

# # print(hex(2000))
# # arr = [random.randrange(random.randrange(32), 200) for i in range(2000)]
# # arr_str = [str(arr[i]) for i in range(2000)]
# # print("MIN: ", min(arr))
# # print(".a "+ " ".join(arr_str))



# kernel = matrix = [
#     [-2, -1, 0],
#     [-1, 1, 1],
#     [ 0, 1, 2] 
# ]

# matrix = [
#     [100, 200, 150, 100, 100, 200, 150, 100],
#     [100, 200, 150, 100, 100, 200, 150, 100],
#     [100, 200, 150, 100, 100, 200, 150, 100],
#     [100, 200, 150, 100, 100, 200, 150, 100],
#     [100, 200, 150, 100, 100, 200, 150, 100],
#     [100, 200, 150, 100, 100, 200, 150, 100],
#     [100, 200, 150, 100, 100, 200, 150, 100],
#     [100, 200, 150, 100, 100, 200, 150, 100],
# ]

# new_matrix = [
#     [0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0],
# ]

# size = 4

# for i in range(4):
#     for j in range(4):
#         acc = 0
#         tl = (i-1, j-1)
#         tm = (i-1, j)
#         tr = (i-1, j+1)
        
#         ml = (i, j-1)
#         mm = (i, j)
#         mr = (i, j+1)
        
#         bl = (i+1, j-1)
#         bm = (i+1, j)
#         br = (i+1, j+1)

#         if tl[0] >= 0 and tl[1] >= 0:
#             acc += matrix[tl[0]][tl[1]] * kernel[0][0]
#         if tm[0] >= 0:
#             acc += matrix[tm[0]][tm[1]] * kernel[0][1]
#         if tr[0] >= 0 and tr[1] < size:
#             acc += matrix[tr[0]][tr[1]] * kernel[0][2]
            
#         if ml[1] >= 0:
#             acc += matrix[ml[0]][ml[1]] * kernel[1][0]
#         acc += matrix[mm[0]][mm[1]] * kernel[1][1]
#         if mr[1] < size:
#             acc += matrix[mr[0]][mr[1]] * kernel[1][2]
            
#         if bl[0] < i and bl[1] >= 0:
#             acc += matrix[bl[0]][bl[1]] * kernel[2][0]
#         if bm[0] < size:
#             acc += matrix[bm[0]][bm[1]] * kernel[2][1]
#         if br[0] < size and br[1] < size:
#             acc += matrix[br[0]][br[1]] * kernel[2][2]
        
#         new_matrix[i][j] = acc
        
# print(new_matrix)

# strn = "174 187 195 166 124 113 106 98 83 80 92 125 165 201 223 241 243 247 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 244 204 170 156 163 214 246 165 191 200 171 147 144 138 137 101 94 91 116 152 201 231 248 251 251 251 251 251 252 251 251 251 251 251 251 251 251 251 251 251 235 185 141 153 182 210 239 178 200 227 176 149 142 161 179 147 132 129 137 135 168 218 247 251 251 251 250 207 224 252 251 251 251 251 251 251 250 250 250 247 223 190 161 191 208 217 237 222 230 242 206 175 148 152 167 161 173 174 139 130 146 212 248 251 251 253 216 131 135 235 252 251 251 251 251 246 229 237 243 239 219 207 220 237 240 240 246 217 231 243 224 222 196 169 157 152 193 186 133 132 138 210 248 249 251 251 177 106 81 165 249 251 251 251 251 235 199 219 238 228 225 236 244 249 251 251 251 169 188 237 243 243 233 205 156 146 182 178 129 131 146 189 240 245 246 209 143 87 69 92 195 253 251 251 249 224 196 227 237 222 220 240 248 250 251 251 251 153 166 205 222 231 219 200 164 137 148 168 139 134 148 187 229 234 210 142 136 72 55 84 117 223 250 243 230 202 190 219 229 224 228 243 249 251 251 251 251 150 149 162 175 195 200 185 131 102 106 142 135 126 140 171 210 220 172 135 127 64 49 90 89 197 240 215 204 180 181 217 233 238 244 248 251 251 251 251 251 142 139 144 151 177 183 142 86 77 79 115 134 116 122 131 181 198 150 140 126 63 50 91 79 163 218 182 186 167 198 241 246 247 250 251 251 251 251 251 251 161 150 135 153 166 166 124 88 67 71 82 109 120 125 134 168 179 132 146 133 61 55 83 66 115 186 185 173 169 201 239 250 251 251 251 251 251 251 251 251 201 172 116 155 145 137 102 85 67 74 81 91 105 127 148 177 166 121 137 140 78 65 84 61 84 151 181 171 161 188 213 243 251 251 251 251 251 251 251 251 188 148 74 92 118 121 92 74 65 86 75 81 74 95 129 171 144 127 97 100 75 69 91 61 72 150 160 179 165 180 170 203 245 246 236 237 250 248 247 249 109 92 58 82 127 108 80 78 80 81 73 76 72 73 105 158 148 131 86 69 69 75 97 62 68 137 174 191 181 164 136 171 231 203 179 180 224 216 209 234 89 85 78 89 131 82 67 77 89 67 61 79 82 67 95 120 135 150 109 61 74 98 80 64 61 102 180 158 144 140 142 142 153 138 127 146 181 201 208 232 109 79 72 103 134 62 54 79 78 67 54 58 75 77 102 91 150 161 81 56 92 127 80 65 61 75 142 128 136 143 122 88 77 76 78 127 154 179 174 190 124 89 48 97 136 55 53 87 66 64 56 50 67 97 128 149 192 143 62 49 100 114 71 61 61 61 95 99 106 103 71 68 72 70 70 91 126 131 130 127 129 97 43 92 104 53 78 97 72 58 52 58 65 79 130 182 169 139 65 50 104 92 59 60 60 49 55 81 80 76 71 65 70 75 69 65 73 87 106 114 126 90 36 95 88 64 78 79 75 47 44 59 59 82 167 165 137 116 96 52 95 93 58 53 53 43 51 73 81 73 67 63 64 71 75 71 67 63 75 116 110 68 33 100 70 59 64 90 109 58 40 62 61 114 206 147 138 99 90 54 104 95 61 44 55 69 61 69 79 90 75 58 64 86 95 77 76 72 68 86 91 65 46 101 55 50 61 111 127 68 37 54 50 113 190 158 156 128 87 66 101 90 63 42 83 81 68 64 65 95 97 68 71 76 87 79 83 76 69 72 96 74 77 110 60 49 77 111 88 72 53 53 62 148 176 166 143 113 76 68 95 82 60 38 92 74 68 58 58 91 127 102 88 79 108 109 93 72 74 71 89 64 101 108 62 64 100 102 84 82 50 58 81 162 178 151 148 132 66 81 114 89 60 30 66 61 65 72 100 124 125 148 159 137 179 137 118 92 65 75 85 60 112 111 61 68 105 117 83 75 48 58 75 166 165 129 136 167 93 79 105 79 51 58 78 79 74 120 157 149 125 135 161 154 175 140 128 132 100 100 80 59 119 99 58 67 111 116 89 77 47 61 86 164 130 123 127 149 133 87 95 83 109 148 142 106 85 105 162 141 136 134 136 109 131 152 131 146 138 148 80 52 82 79 67 73 107 109 89 71 48 63 117 155 118 130 132 145 106 89 104 142 172 147 149 122 119 127 163 134 135 132 122 116 134 151 119 120 121 152 72 69 72 89 72 74 85 88 88 61 40 67 160 120 119 127 139 132 92 80 99 177 185 141 144 149 138 104 138 129 126 106 100 113 138 196 174 158 123 176 98 110 114 88 89 88 88 100 88 48 47 86 178 126 122 119 127 116 82 86 92 170 165 139 148 170 129 113 125 98 105 98 84 115 118 174 239 207 121 145 85 122 125 91 97 104 102 114 75 35 78 129 157 114 120 101 105 106 91 99 123 145 140 116 123 162 114 104 137 118 117 121 80 114 134 126 206 246 212 191 82 84 108 108 99 116 97 107 66 38 75 147 108 89 109 103 126 124 110 100 108 109 149 120 127 122 104 105 113 140 137 130 76 129 135 122 187 249 246 233 80 95 98 106 112 110 74 87 62 55 95 159 97 103 113 107 123 116 109 68 77 141 149 136 165 140 149 107 146 208 194 195 129 143 137 168 238 239 234 223 73 68 102 110 122 123 58 78 73 85 194 195 107 116 119 114 135 121 79 64 98 169 141 137 181 184 223 213 233 254 248 244 231 232 204 208 199 183 154 140 72 69 101 124 135 101 63 74 69 82 195 174 110 123 114 131 120 92 70 68 128 161 136 159 172 134 161 191 236 249 226 221 235 208 170 153 146 141 133 147 98 113 117 140 142 74 87 66 73 90 176 137 118 123 122 146 106 83 78 83 160 137 129 166 190 161 159 164 193 228 216 196 182 156 146 152 144 143 150 142 107 88 104 122 126 64 79 119 161 196 195 107 110 113 117 130 127 104 100 147 169 138 156 198 175 192 207 195 191 214 205 182 153 147 143 140 147 148 150 151 89 63 106 127 131 111 119 209 243 253 181 109 114 113 105 114 115 114 142 167 147 155 206 171 172 180 173 199 196 192 170 141 135 156 145 150 144 132 147 155 79 84 123 139 150 162 214 240 237 251 238 195 135 118 104 93 119 162 169 158 144 193 214 172 198 180 171 163 184 191 156 144 154 154 154 157 155 140 154 167 128 156 135 140 178 208 208 192 220 251 253 237 182 136 120 130 181 194 189 198 218 209 190 160 184 191 206 206 196 191 188 165 174 170 155 165 165 152 162 163 234 252 234 199 186 162 159 161 201 250 251 252 234 202 193 193 186 181 198 191 218 196 178 156 178 204 209 183 196 213 189 162 191 191 157 165 166 168 173 155 237 246 213 175 156 159 156 163 216 244 250 251 219 190 191 180 178 183 175 192 197 186 192 183 185 180 189 179 211 164 142 141 111 145 155 158 163 161 160 151 219 195 149 145 148 152 150 149 186 214 212 224 193 172 169 173 189 194 185 209 158 146 194 196 178 165 158 129 206 163 123 92 89 132 137 158 156 143 151 150"
            
# print(pgmread(""))



print("Input Filename: ")
fname = input()

print("Dimensions: ")
dim = int(input())

print("Output Name: ")
otpn = input()

f = open(fname)

all = []
for line in f:
    strn = line.split(" ")[:-1]
    print(strn)
    all += strn

ints = []
for i in range(len(all)):
    num = int(all[i])
    if num < 0:
        ints.append(0)
    elif num > 255:
        ints.append(255)
    else:
        ints.append(num)
        
print("Len: ", len(ints))

f = open(otpn, "w")
f.write("P2\n")
f.write("%d %d\n" % (dim, dim))
f.write("255\n")
for i in range(dim):
    strn = ""
    for j in range(dim):
        index = (i * dim) + j
        strn += str(ints[index])
        strn += " "
    strn += "\n"
    f.write(strn)
    
        
    
